input {
    syslog {
        type => sonicwall
        port => 5144
    }
}

filter{
    if [type] == "sonicwall" {
        if [type] == "syslog" {
            grok {
                match => [ "message", "%{TIMESTAMP_ISO8601:@timestamp} %{HOST:syslog_host} %{GREEDYDATA:raw_message}" ]
                }
            }
            
            csv {
                separator => ","
                columns => ["Time","ID","Category","Group","Event","Msg. Type",
                "Priority","Ether Type","Src. MAC","Src. Vendor",
                "Src. Int.","Src. Zone","Dst. MAC","Dst. Vendor",
                "Dst. Int.","Dst. Zone","Src. IP","Src. Port",
                "Src. Name","Src.NAT IP","Src.NAT Port","In SPI",
                "Dst. IP","Dst. Port","Dst. Name","Dst.NAT IP",
                "Dst.NAT Port","Out SPI","IP Protocol","ICMP Type",
                "ICMP Code","RX Bytes","TX Bytes","Access Rule",
                "NAT Policy","User Name","Session Time","Session Type",
                "IDP Rule","IDP Priority","HTTP OP","URL","VPN Policy",
                "HTTP Result","Block Cat","Application","FW Action",
                "DPI","Notes","Message","HTTP Referer"]
            }
            
            date {
                timestamp => "Africa/Accra"
                match => ["GenerateTime", "YYYY/MM/dd HH:mm:ss" ]
            }

            mutate {
                convert => ["Priority", "integer"]
                convert => ["Src. Port", "integer"]
                convert => ["Src.NAT Port", "integer"]
                convert => ["Dst. Port", "integer"]
                convert => ["Dst.NAT Port", "integer"]
                convert => ["ICMP Code", "integer"]
                convert => ["RX Bytes","integer"]
                convert => ["TX Bytes","integer"]
                remove_field => ["message", "raw_message"]
            }

            # Geolocate logs that have SourceAddress and if that SourceAddress is a non-RFC1918 
            # address or APIPA address
            if [Src. IP] and [Dst. IP] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
                geoip {
                    database => "/opt/logstash/GeoLiteCity.dat"
                    source => "SourceAddress"
                    target => "SourceGeo"
                }
                
                #Delete 0,0 in SourceGeo.location if equal to 0,0
                if ([Src. IP] and [Dst. IP] =~ "0,0") {
                    mutate {
                        replace => [ "SourceGeo.location", "" ]
                    }
                }
            }
            
            # Geolocate logs that have DestinationAddress and if that 
            # DestinationAddress is a non-RFC1918 address or APIPA address
            if [Src. IP] and [Dst. IP] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
                geoip {
                    database => "/opt/logstash/GeoLiteCity.dat"
                    source => "DestinationAddress"
                    target => "DestinationGeo"
                }
                
                #Delete 0,0 in DestinationGeo.location if equal to 0,0
                if ([DestinationGeo.location] and [DestinationGeo.location] =~ "0,0") {
                    mutate {
                        replace => [ "DestinationAddress.location", "" ]
                    }
                }
            }
        }
    }

output {
    elasticsearch {
      protocol => "node"
      node_name => "logstash"
      cluster => "elasticsearch"
      host => "localhost"
    #   template => "/opt/logstash/elasticsearch-template.json"
    #   template_overwrite => true
    }
}